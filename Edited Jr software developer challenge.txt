Junior Software developer Challenge:
==============================

1.(a): write a function that takes the 6 augments above (R1, D1, R2, D2, R3, D3 as well as the paid amount K and determines the total days of lighting the farmer can get.

e.g. consider : get_days_of_power(R1=1000, D1=3, R2=500, D2=10, R3=1500, D3=7, K=21000)

Loan L1 has a daily rate of R1 = 1000 and starts in D1 = 3 days
Loan L3 has a daily rate of R3 = 1500 and starts in D3= 7 days
Loan L2 has a daily rate of R2 = 500 and starts in D2 = 10 days
and farmer pays k = 21,000

first 2 days  account daily rate = 0 days of power = 0
day 3 to day 6 account daily rate = 1000, days of power = 4 days of power at 4000
day 7 to 9 account daily rate = 2500, days of power = 3 days at 7500
day 10 to 12 account daily rate = 3000, days of power = 3 days at 9000 
balance 500 less than daily rate of 3000 so its written off.
total days of power = 10

==============================
K = 21000
current_rate = 0
      LOAN CR  TA  AA
day 1: X 	0  0  21000
day 2: X 	0  0  21000

K = 21000
current_rate = 1000
      LOAN CR   TA  AA
day 3: L1 1000 1000 20000 
day 4: L1 1000 2000 19000
day 5: L1 1000 3000 18000
day 6: L1 1000 4000 17000
21000 - (1000 * 4) = 17000


K=17000
current_rate = 1000 + 1500
current_rate = 2500
          LOAN  CR   TA  AA
day 7: L1 + L2 2500 6500 14500
day 8: L1 + L2 2500 9000 12000
day 9: L1 + L2 2500 11500 9500
17000 - (2500 * 3) = 9500


k=9500
current_rate = 2500 + 500
current_rate = 3000
             LOAN      CR   TA  AA
day 10: L1 + L2 + L3 3000 14500 6500
day 11: L1 + L2 + L3 3000 17500 3500
day 12: L1 + L2 + L3 3000 20500 500
9500 - (3000 * 3) = 500


1.(b): write unit test to compute:
	get_days_of_power(R1=3000, D1=3, R2=500, D2=10, R3=1500, D3=7, K=700000)
	get_days_of_power(R1=500, D1=3, R2=500, D2=10, R3=500, D3=7, K=21000)
	get_days_of_power(R1=1300, D1=0, R2=500, D2=0, R3=1500, D3=7, K=10000)
	get_days_of_power(R1=10000, D1=3, R2=500, D2=10, R3=1500, D3=7, K=11000)

